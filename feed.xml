<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom"><id>https://github.com/geoqiao/gitblog</id><title>RSS feed of geoqiao's gitblog</title><updated>2023-08-19T07:57:45.031711+00:00</updated><author><name>geoqiao</name><email>realvincentqiao@gmail.com</email></author><link href="https://github.com/geoqiao/gitblog"/><link href="https://raw.githubusercontent.com/geoqiao/gitblog/main/feed.xml" rel="self"/><generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator><entry><id>https://github.com/geoqiao/gitblog/issues/15</id><title>重器轻用-Obsidian</title><updated>2023-08-19T07:57:45.207769+00:00</updated><content type="html"><![CDATA[<h2>什么是 Obsidian</h2>
<p>Obsidian 是一个个人知识管理和笔记应用程序，它使用<strong>Markdown</strong>语法来编写和格式化笔记，帮助用户组织、链接和探索知识。它支持<strong>双向链接</strong>、标签、搜索和<strong>插件扩展</strong>，并且完全本地化存储，让用户轻松构建和管理一个互相关联的知识网络。</p>
<p>总结下来三个优点：</p>
<ol>
<li>Markdown 语法：简单排版秒杀 Word、Notes、OneNote 等一众软件</li>
<li>双向链接：在笔记与笔记之间关联</li>
<li>插件扩展：是的，甚至可以使用插件搭建一个本地版本的 Notion</li>
</ol>
<h2>为什么使用 Obsidian</h2>
<p>总结下来有以下几个原因：</p>
<ol>
<li>有时候脑子里有些奇怪的想法，想记录下来，类似 flomo 那种</li>
<li>有时候想写一点东西，分享自己的经验、记录自己。</li>
<li>不想使用在线服务（想法天马行空，不想被审查</li>
</ol>
<p>恰好，Obsidian 完全满足以上需求：</p>
<ol>
<li>完全本地，想跨设备同步可以使用 iCloud</li>
<li>有类 flomo 插件，完全可以当作本地版本的 flomo 使用</li>
<li>玩法花样多，想折腾也有折腾空间</li>
</ol>
<h2>我如何使用 Obsidian</h2>
<p>我使用工具类 app 有个特点，在一开始喜欢折腾，恨不得把所有功能都试一遍、所有主题都换一遍；在熟悉之后，又进行瘦身，把不用的功能都关掉，只保留最常用的几个功能。</p>
<p>以下是我现在的使用配置：</p>
<ol>
<li>不使用模板：因为使用模板需要不定时维护，也许突然想改、优化，这很消耗精力，这让我没办法专心记录</li>
<li>仅安装 memos、PanGu 插件：memos 插件可以把 Obsidian 变成一个本地版 flomo，随时随地记录灵感；PanGu 插件可以优化排版（使文章中的英文字母单词前后增加空格</li>
<li>双向链接：不定期更新以写完文章的双向链接</li>
</ol>
<p>OK，这就是我的全部用法了。</p>
<p>Obsidian 很强，如果你想用它替代 Notion、Xmind、白板工具、PPT、稍后读等等，都是可以实现的。但是，这些功能对于普通用户来说都很重，消耗太多精力。</p>
<p>我认为最重要的是：精力集中在<strong>使用工具</strong>，而不是<strong>如何使用工具</strong>上。</p>
<p>对比 Notion，想用得好，自己又得做产品经理，又得做开发，搞一个模板可能没用几次可能就有新场景需要满足，又要优化模板，最后成长的架构思维和设计能力，这是我不想从一个<strong>知识管理</strong>软件上体验到的。</p>
<p>Obsidian 给了我一个可以重器轻用的选择，这非常重要。</p>
]]></content><link href="https://github.com/geoqiao/gitblog/issues/15" rel="alternate"/><category term="macOS"/><published>2023-08-19T07:57:20+00:00</published></entry><entry><id>https://github.com/geoqiao/gitblog/issues/14</id><title>Python环境安装-Anaconda为例</title><updated>2023-08-19T07:57:45.305946+00:00</updated><content type="html"><![CDATA[<p>学习 Python 第一步就是需要安装一个 Python 环境，这可劝退了大部分人。</p>
<h2>安装 Python 环境的几种传统方式</h2>
<ol>
<li>系统自带，直接用系统的。比如 macOS 一般自带 Python3。</li>
<li>终端使用 Homebrew 类似的包管理工具安装。安装后自己修改路径，安装需要使用的 Python 库。一般成功后终端输入<code>python3</code>就可以成功进入 Python 环境了。</li>
<li><a href="https://www.python.org/">Python 官网</a>最直接的方式，甚至官网也有详细的安装教程。</li>
</ol>
<p>以上几种方式，对于已有编程经验或者计算机基础知识的人来说，完全可以，可操作空间极大，完全可以自定义一个个性化的 Python 环境。</p>
<p>但是对于刚入门的小白，我以重装系统的惨痛教训建议：不要使用以上的方法安装 Python！</p>
<h3>为什么不推荐？</h3>
<p>因为终端操作有一定门槛，新手第一次安装遇到报错很容易直接劝退；就算折腾一番安装好了，后续各种后续看不懂的终端命令也够折磨人的了。</p>
<blockquote>
<p>人的焦虑和恐惧来自于没有安全感，对工具的掌控程度越高，安全感越多</p>
</blockquote>
<p>我也不知道我怎么就安装了好几个版本的 Python，Google 搜如何解决，随便在某 code 网站复制了一个命令，然后，电脑就什么都没了，重装系统都进行不下去，最后只能求助于天才吧。</p>
<h2>新手友好的 Python 环境安装-Anaconda</h2>
<p>作为 95 后，小时候没少玩 DNF、穿越火线、英雄联盟。那时候还不像现在网速这么快，每次更新加载都很慢，每次等待都想踹主机。但我家里穷，只敢心里想想不敢真的踹。那每次大更新我都直接卸载重装。</p>
<p>对于安装游戏、卸载游戏我相当在行，想安装在 D 盘，绝不会让游戏安装到 C 盘。</p>
<h3>为什么讲到这个呢？</h3>
<p>因为<strong>安装 Anaconda 的过程</strong>，就像给电脑安装游戏一样简单。</p>
<ol>
<li>找到<a href="https://www.anaconda.com/">Anaconda 官网</a></li>
<li>下载安装包</li>
<li>安装安装包（就是屏幕上弹出一个框框，就是需要一直点下一步的那个熟悉的框框</li>
<li>选择喜欢的编辑器，新建<code>.ipynb</code>文件，kernel 选择前面带 base 的就行</li>
<li>大部分库基本都有，比如 pandas、numpy 等等，不需要二次手动安装</li>
</ol>
<h2>用什么编辑器呢？</h2>
<p>说实话很多编辑器都很好用，但我们的原则是必须简单、免费。</p>
<p>那就有两个选择：</p>
<p>一个是 jupyter notebook ，很适合新手。写一行、运行一行，非常好入门。</p>
<p>另一个是 VSCode，可以安装 jupyter notebook 插件，以及 Python 的语法高亮插件。我个人感觉要比纯粹的 jupyter notebook 功能更强大，使用体验也更好。</p>
<p>我自己是在用 VSCode，因为 VSCode 创建文件夹、管理文件夹的方式跟在资源管理器/访达里面创建删除的体验没啥区别，非常直觉。</p>
<h2>总结</h2>
<p>以上就是全部内容，其实跟标题相关的就四五行。具体安装教程没有写，是因为真的和小时候下载安装游戏的流程一模一样。</p>
<p>如果过程中碰到什么问题，可以及时 Google 搜索。当然，如果你愿意的话，可以直接在这个 issue 下面评论，我会尽快回复的。</p>
]]></content><link href="https://github.com/geoqiao/gitblog/issues/14" rel="alternate"/><category term="Top"/><category term="Python"/><published>2023-07-30T11:09:46+00:00</published></entry><entry><id>https://github.com/geoqiao/gitblog/issues/13</id><title>From English Import Python</title><updated>2023-08-19T07:57:45.387976+00:00</updated><content type="html"><![CDATA[<h2>关于我</h2>
<p>我是一个很普通的人，大学在普通二本商科专业。</p>
<p>刚毕业的时候vlookup都不会，到熟练excel；后来自己学了SQL，从杂乱的底表自己捞数，最后自己一个人维护自己业务线的数据库视图层（当然工资没有涨，只是事情变多了）</p>
<p>半年多前，发现日常工作仍然有好多东西并不是能从数据库来的，SQL 和 Tableau 并不能解决全部问题。</p>
<p>每个月仍要处理大量杂乱无章的excel工作，这消耗我很多精力，工作非常痛苦。</p>
<p>于是萌生了学习 Python 的想法，通过半年多通勤路上、周末晚上的阅读学习，现在已经写了两个脚本，原来每天半小时的工作量，现在只需要一次点击，3秒钟完成。</p>
<p>但还是有很多 Python 方法不熟悉不知道、很多方法的参数不熟悉不知道、很多需求不知道怎么表达怎么Google。</p>
<p>所以，我创建了这个 <a href="https://github.com/geoqiao/Python_DA_100_day">repo</a> ，来记录我的学习过程。</p>
<p>并且，如果我都能学会，那只要你也感兴趣这个，你也可以学会。</p>
<h2>数据源</h2>
<p>大部分数据源应该来自<a href="https://www.kaggle.com/datasets">kaggle</a>, Kaggle是一个免费的数据集网站，同时有很多课程，如果想要做一些数据分析项目，可以在 Kaggle 寻找合适的数据集。</p>
<p>但是，kaggle的数据源真的质量太高了，感觉好像没有人被我工作中的那种数据折磨过。</p>
<p>所以之后，我会增加一些我平时工作会遇到的数据作为数据源（当然会脱敏处理一下），</p>
<h2>学习资源推荐</h2>
<h3>Python基础</h3>
<p>必须是<a href="https://youtube.com/playlist?list=PLhQjrBD2T3817j24-GogXmWqO5Q5vYy0V">CS50P</a></p>
<p>从最简单的概念和问题开始学起，去解决最难的问题。最开始我是看国内教程的，但是他们一上来 <code>print(&#x27;hello world&#x27;)</code>之后，就开始数据结构、循环、条件语句，真的太难听懂了，很劝退。</p>
<p>大卫老师从简单的问题讲起，让我理解数据结构、循环、条件语句是如何解决我们碰到的问题的。写出有bug的代码也没关系，尝试跟着大卫老师一起思考代码哪里有问题，我们想解决什么问题，如何利用Python去解决这个问题。</p>
<h3>数据分析库</h3>
<p>必须是这个<a href="https://www.udemy.com/course/python-for-machine-learning-data-science-masterclass/">Udemy课程</a></p>
<p>Data Science？没有关系，里面讲的pandas、seaborn、matplotlib真的很好，有兴趣可以看后面的机器学习部分，没兴趣就别看了，在一开始学那么难没有必要。</p>
<p>在这里，老师会手把手教你写代码，每节课都会有课后练习在<a href="https://github.com/SuvroBaner/Python-for-Data-Science-and-Machine-Learning-Bootcamp">github</a>，一定要去亲自手敲一遍，哪怕是一边看答案一边敲。</p>
<h3>书</h3>
<p>必须是<a href="https://wesmckinney.com/book/">Python for Data Analysis: Data Wrangling with Pandas, NumPy, and IPython</a></p>
<p>作者本身就是pandas的作者，写的也非常好。我看的是第二版，第三版已经放在网站上公开校对，主要针对新的pandas版本做了更新。</p>
<p>我建议可以不用过于介意pandas版本，可能你学了2.0版本的pandas，但是实际上公司用的还是1.0版本。最开始也不用一页一页去读，翻看一边目录，挑选pandas相关章节简单看一看，最重要的是不要一开始给自己太高目标，自己把自己劝退。</p>
<h3>文字版教程</h3>
<p>微软<a href="https://learn.microsoft.com/en-us/training/paths/beginner-python/?WT.mc_id=academic-77958-bethanycheum">Python for beginners</a>：</p>
<p>实际上，我并不觉得这个教程对于学习 Python 有多好，但他足够简单，简单到我是抱着学习英语的心态看这个教程的。</p>
<h3>练习</h3>
<p>最重要的还是练习，我不会建议你把教程中所有的代码都跟着老师敲一边，因为那真的很劝退人。一边看视频、一边敲代码、一边点暂停播放，光想想就觉得太反人类了。上课的时候认真听，听完消化一下，再尝试自己敲一敲。当然，敲不了也没有关系，有时间再敲，但是一定要敲。</p>
<p><a href="https://www.udemy.com/course/python-for-machine-learning-data-science-masterclass/">Udemy课程</a>的GitHub页面有课后习题，也有习题答案；微软<a href="https://learn.microsoft.com/en-us/training/paths/beginner-python/?WT.mc_id=academic-77958-bethanycheum">Python for beginners</a>甚至不需要你自己安装Python环境，直接在教程网页就可以跑练习代码。其他的教程可以自己安装Python环境后，使用VSCode一起跟着敲。</p>
<h3>配置Python环境</h3>
<p>配置Python环境真的太令人头痛了，我一开始通过 Homebrew 安装，结果安装了好几个版本，刚开始学也不会建立虚拟环境，体验真的糟糕。而且我很爱折腾，Python 一有新版本我一定要第一时间<code>brew upgrade</code>。最后，我想这样是不行的。</p>
<p>所以我在这里推荐 Anaconda。Anaconda 是一个用于科学计算的Python发行版，它包含了众多常用的科学计算和数据分析工具，例如 NumPy、Pandas、SciPy、Matplotlib 等等，下载安装都很简单。也省去了安装各种包的麻烦。</p>
<p>最大的优点就是简单，简单是最大的优点。</p>
<h2>最后</h2>
<p>最好的学习不是一开始就能学会很难的东西，而是从简单的看起，一步一步持续进步。</p>
<p>如果一个人跟小白讲怎么开始自学机器学习，一开口就各种算法怎么牛逼，那我建议尽早结束谈话。他这么讲只有两个可能，要么他很无知在吹牛逼，要么他不是一个很好的老师。</p>
<p>建立自信是极为重要的，武侠小说的主人公，都是从打败恶势力的一个小兵开始的，要是一开始碰见大 boss，那早就完蛋了。</p>
]]></content><link href="https://github.com/geoqiao/gitblog/issues/13" rel="alternate"/><category term="Top"/><category term="Python"/><category term="Data analysis"/><published>2023-07-29T09:58:20+00:00</published></entry><entry><id>https://github.com/geoqiao/gitblog/issues/12</id><title>Shottr- 原生、轻巧且功能强大的免费macOS截图工具</title><updated>2023-08-19T07:57:45.475463+00:00</updated><content type="html"><![CDATA[<p>| <a href="https://shottr.cc/">Shottr官网</a></p>
<ul>
<li>
<p><strong>截图</strong>：不得不说，作为截图工具的基础功能，shottr并没有特别出彩的地方，UI也谈不上漂亮。但是基础的区域截图、顺序标记都有，操作起来也非常直觉。而且在其他同类app中要付费的滚动截图功能也是免费的。</p>
</li>
<li>
<p><strong>打码</strong>：把打码功能单独拎出来说，是因为shottr的操作特别直觉。只要框选区域，按下delete键即可。最新出的Blur Text和Erase Text功能可以自动识别图中的文字，在这个模式里按下delete后只给文字打码。唯一的不足就是目前对中文文字识别似乎还不太精确，反馈issue后，开发者回复：“Text recognition is performed by macOS embedded OCR engine and its quality is out of my hands.”。</p>
</li>
<li>
<p><strong>OCR</strong>：不像其他截图app，需要先截图，然后选中图中文字复制。shottr只需要⌥+T框选需识别区域，文字便会自动复制到剪贴板。谁身边还没有一群就喜欢发图片，但从不考虑你需要复制图中手机号/ID的同事呢？</p>
</li>
<li>
<p><strong>另外</strong>：不管截图还是OCR，内容都会保存在剪贴板中。即时使用的内容可以直接粘贴，非即时使用的内容也可以搭配剪贴板工具进行管理。因为我的剪贴板内容管理需求并不高，<a href="https://telegra.ph/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E7%94%A8raycast%E6%9B%BF%E4%BB%A3%E4%BA%86alfred-07-17">所以使用Raycast的clipboard功能就完全够用了</a>。</p>
</li>
</ul>
<p>-<strong>贴图</strong>。就是把图片钉在屏幕最上层</p>
<p>整体体验下来，我认为 shottr非常适合经常需要<strong>对截图进行简单编辑</strong>或者经常使用<strong>OCR功能</strong>的朋友，shottr 能轻松满足你的需求。而且，向开发者邮件反馈issue，开发者回复都非常积极。</p>
]]></content><link href="https://github.com/geoqiao/gitblog/issues/12" rel="alternate"/><category term="macOS"/><published>2023-07-29T06:28:23+00:00</published></entry><entry><id>https://github.com/geoqiao/gitblog/issues/11</id><title>What's on my Mac</title><updated>2023-08-19T07:57:45.562607+00:00</updated><content type="html"><![CDATA[<p>和大多数人一样，拿到一台MacBook第一件事就是找各种软件，以下是我目前在用的一些。它们的整体使用体验都很不错，且部分软件可以联动形成 workflow ，供大家参考。</p>
<h2>启动器类- Raycast</h2>
<p>目前免费的启动器类app，可以启动、替代很多软件。自带的窗口管理功能替代 magnet、rectangle 等等窗口管理软件；自带的文件搜索功能替代了访达；还有一系列提升工作效率的插件。不了解的人可以<a href="https://telegra.ph/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E7%94%A8raycast%E6%9B%BF%E4%BB%A3%E4%BA%86alfred-07-17">参考这里</a>。</p>
<h2>自动切换输入法- Input Source Pro</h2>
<p>自动切换输入法。给不同 app、网站设置不同输入法。属于平时特别没有存在感，但一旦某天出 bug 就会想砸电脑的那种 app。</p>
<h2>截图-Shottr</h2>
<p>截图软件，小巧、免费、功能俱全。长截图、OCR、顺序标注，除了贴图，其他功能几乎都有，而且体验很棒。</p>
<h2>解压缩-Keka</h2>
<p>免费好用的解压缩软件。</p>
<h2>鼠标体验-Mac Mouse Fix</h2>
<p>开源、免费、改善Mac鼠标滚动体验。Mos同样好用，但是似乎最新版本与 Shottr 长截图有冲突，故放弃。</p>
<h2>刘海管理-Bartender4</h2>
<p>刘海屏永远的痛，同类免费软件总是不如预期，故 618 打折入手正版Bartender。</p>
<h2>RSS源-RSSHub Radar</h2>
<p>一款可以发现当前网页Rss订阅的浏览器扩展，支持 Safari、Chrome。</p>
<h2>RSS阅读- Netnewswire</h2>
<p>开源免费的 RSS 阅读器，我用它替代了 reeder4。主要原因是他支持macOS原生的翻译功能，选词右键就可以，reeder4不行。</p>
<h2>文档日记写作- Typora + Obsidian</h2>
<p>markdown 编辑器。Typora 编辑体验好，Obsidian 管理文件好用。简单设置一下可以同步图片。</p>
<h2>GTD - Itsycal 、reminder</h2>
<p>Itsycal 是一款日历插件，可以在状态栏点击直接添加日程，和原生 Calendar 同步。有预定日期的会议、比较确定的日程通过 Itsycal 记录在日历里面，日期不确定的待办事项记在 Reminder。焦虑感和慌张感会少很多。</p>
<h2>浏览器插件</h2>
<p>常用的Chrome插件</p>
<p>屏蔽广告：uBlock Origin</p>
<p>多端、多浏览器密码同步：Bitwarden</p>
<p>rss源：RSSHub Radar</p>
<p>Trancy：YouTube神器、英语学习神器（YouTube有很多公开课，比如CS50P等等）</p>
<h1>其他</h1>
<p>微信、telegram、VSCode、Chrome。。。</p>
<p>office 被我卸载了，因为想学 pandas，强迫自己用 pandas 读表</p>
<p>Report content on this page</p>
]]></content><link href="https://github.com/geoqiao/gitblog/issues/11" rel="alternate"/><category term="macOS"/><published>2023-07-29T06:20:29+00:00</published></entry><entry><id>https://github.com/geoqiao/gitblog/issues/10</id><title>基于 GitHub issues 的个人 blog 搭建</title><updated>2023-08-19T07:57:45.657710+00:00</updated><content type="html"><![CDATA[<h2>背景</h2>
<p>我最近碰到了以下问题：</p>
<ol>
<li>偶尔想写点东西，想有一个个人 blog</li>
<li>不懂代码：听到部署、买域名、备案、服务器这些词就头疼想逃避</li>
<li>不想花钱：买服务器、域名一年好几百甚至可能上千</li>
</ol>
<h2>解决方案</h2>
<p>基于<a href="https://github.com/yihong0618">yihong0618</a>的 gitblog 项目，在 GitHub 上搭建一个基于 issues 的个人博客。</p>
<p><strong>这个方法有以下几个优点：</strong></p>
<ol>
<li>完全免费：不会碰到域名、服务器、备案、一年多少钱这些问题</li>
<li>非常简单：会下载文件、上传文件、编辑文件就可以完成</li>
<li>自动化：大佬已经写好了一些函数和脚本，可以自动化完成一些操作</li>
</ol>
<p><strong>搭建前需要什么：</strong></p>
<ol>
<li>可以登录使用 GitHub </li>
<li>注册一个 GitHub 账号</li>
</ol>
<h2>操作教程</h2>
<p>操作教程可以参考这个<a href="https://zhuanlan.zhihu.com/p/400962805">知乎链接</a>，教程写的非常详细，部分页面UI因版本问题跟现在有点区别，但是基本不影响操作。</p>
<p>不过需要补充一点，按教程操作完成后需要把GitHub Action的读写权限打开。操作方式为 Settings - Actions - General - 勾选 Read and write permissions - save，如下图所示：</p>
<img width="1490" alt="action读写权限开启" src="https://github.com/geoqiao/gitblog/assets/105639506/c8efcada-36d7-42f9-aed6-30b78ce3873e">
<h2>结语</h2>
<p>以上就是全部内容，非常感谢 @yihong0618 老师的代码。</p>
]]></content><link href="https://github.com/geoqiao/gitblog/issues/10" rel="alternate"/><category term="Top"/><published>2023-07-18T13:10:40+00:00</published></entry><entry><id>https://github.com/geoqiao/gitblog/issues/9</id><title>总得活着吧？</title><updated>2023-08-19T07:57:45.746238+00:00</updated><content type="html"><![CDATA[<p>世俗价值都是禁不起推敲的，推敲下去觉得活着没意义。  </p>
<p>你越想意义就越痛苦。所以人们只能有两个选择，肉体自杀和哲学自杀。</p>
<h2>哲学自杀</h2>
<p>哲学自杀就是不再想这个问题了，老子选择信仰个宗教，伊斯兰或者马克思，或者世俗主义，或者纯粹享乐比谁啪的多，比谁赚得多…总之信个世俗价值的东西。你可以随便吃饭时候问一下同桌人，生活的意义是啥，别人不是笑你就是说想这干嘛，但他们是无法给出答案的。这就是所谓哲学自杀。人如果不愿放弃，继续思考，结果必然面对找不到意义的尴尬，也就是加缪的名词‘荒谬’，很可能走向虚无。</p>
<h2>肉体自杀</h2>
<p>肉体自杀就是没办法不想意义的问题，但是想来想去没有答案，没有答案还是没有办法不想。最后，只能选择终身一跃，为了彻底暂停思考或者探索另一种可能。</p>
<h2>没有哲学自杀但还没走到肉体自杀？</h2>
<p>人如果不愿放弃，继续思考，结果必然面对找不到意义的尴尬，也就是加缪的名词‘荒谬’，很可能走向虚无。
在荒谬虚无走到底点，人的反抗激情就回归了。于是众多存在主义者就揭竿而起，擦，既然没有意义，老子就自己给自己定义意义。我得先做选择，选择后先去做，再去想。
但是自己定义意义会出问题，比如脑门被夹了，定义出奸淫幼童这种意义怎么办？于是萨特就提出了承担责任，也就是说，不管你选择了啥，顺着选择做了啥，都要承担对应责任。责任更像一种惩罚，奸淫幼童就要承担被道德、法律制裁的责任。存在主义者的要求就是人要为自己行动承担责任。</p>
<h2>知其不可为而为之</h2>
<p>就比如，生活给了你一巴掌，让你去死；你不仅不能听它的，还得回它一巴掌，再加一句：操！生命的意义就在这句粗口里。</p>
<p>知道人终有一死，但现在，我选择活。</p>
]]></content><link href="https://github.com/geoqiao/gitblog/issues/9" rel="alternate"/><category term="胡思乱想"/><published>2023-07-15T14:40:01+00:00</published></entry><entry><id>https://github.com/geoqiao/gitblog/issues/8</id><title>Out of the depth of misfortune comes bliss</title><updated>2023-08-19T07:57:45.830893+00:00</updated><content type="html"><![CDATA[<p>大方无隅</p>
<p>大器晚成</p>
<p>大音希声</p>
<p>大象无形</p>
<p>大直若屈</p>
<p>大巧若拙</p>
<p>大辩若讷</p>
<p>大盈若冲</p>
<p>大成若缺</p>
<p>大勇若怯</p>
<p>大智若愚</p>
<p>大璞不完</p>
<p>时来运转</p>
<p>乐极生悲</p>
<p>苦尽甘来</p>
<p>物极必反  </p>
<p>否极泰来</p>
<p>否极泰来</p>
<p>否极泰来</p>
]]></content><link href="https://github.com/geoqiao/gitblog/issues/8" rel="alternate"/><category term="胡思乱想"/><published>2023-07-15T03:34:29+00:00</published></entry><entry><id>https://github.com/geoqiao/gitblog/issues/7</id><title>空调剥削理论的提出</title><updated>2023-08-19T07:57:45.905365+00:00</updated><content type="html"><![CDATA[<h2>两大基本原理</h2>
<p><strong>首先</strong>，在开始阐述空调剥削理论之前，先来了解一下这个理论成立的两大基本原理：</p>
<p><strong>空调制冷原理</strong>和<strong>能量守恒</strong></p>
<h3>空调制冷原理</h3>
<p><strong>空调制冷原理</strong>是指空调制冷运作的原理。空调器通电后，制冷系统内制冷剂的低压蒸汽被压缩机吸入并压缩为高压蒸汽后排至冷凝器，室内空气不断循环流动，达到降低温度的目的。</p>
<p>轴流风扇吸入的室外空气流经冷凝器，带走制冷剂放出的热量，使高压制冷剂蒸汽凝结为高压液体。高压液体经过过滤器、节流机构后喷入蒸发器，并在相应的低压下蒸发，吸取周围的热量。同时贯流风扇使空气不断进入蒸发器的肋片间进行热交换，并将放热后变冷的空气送向室内。</p>
<p>说白了就是吸入的空气经过冷凝器把放出的热量排出到室外，再把冷却后的空气送到室内，以达到制冷的目的。</p>
<h3>能量守恒</h3>
<p><strong>能量守恒定律</strong>（energy conservation law）即热力学第一定律，是指在一个封闭（孤立）系统的总能量保持不变。其中总能量一般说来已不再只是动能与势能之和，而是静止能量（固有能量）、动能、势能三者的总量。</p>
<p>能量守恒定律可以表述为：一个系统的总能量的改变只能等于传入或者传出该系统的能量的多少。总能量为系统的机械能、热能及除热能以外的任何内能形式的总和。</p>
<p>如果一个系统处于孤立环境，即不可能有能量或质量传入或传出系统。对于此情形，能量守恒定律表述为：</p>
<blockquote>
<p>“孤立系统的总能量保持不变。”</p>
</blockquote>
<p>能量既不会凭空产生，也不会凭空消失，它只会从一种形式转化为另一种形式，或者从一个物体转移到其它物体，而能量的总量保持不变。能量守恒定律是自然界普遍的基本定律之一。</p>
<h2>那么胡思乱想来了</h2>
<p><strong>这两个原理往出一摆，聪明的可能就猜出来了</strong></p>
<p>能量守恒定律用在现在的空调制冷上面得出了一个可怕的结论：</p>
<blockquote>
<p>空调在长期来看不仅不利于制冷，反而导致了全球变暖！</p>
</blockquote>
<h3>为什么会变暖</h3>
<p>是这样，室内的那部分空气的热量排到室外，室外单位体积空气的热量就会升高，室外的总体热量升高。</p>
<p>室外是哪里？室外，指露天场所。也就是整个自然环境啊。整个自然环境的整体热量升高，那不就是全球变暖嘛！</p>
<p>这里大家可能又要问了，这室内和室外是一体的呀，都属于地球的生态环境的一部分呀。</p>
<p>是呀，可使用空调的时候为了保证制冷效果，都是关着门窗，这就造成了室内和室外环境的分离，空调是两者之间的唯一通路。所以，室内和室外就是地球这个孤立系统的两个不同部分。</p>
<h3>变暖和剥削有什么关系</h3>
<p>那全球变暖就变暖吧，空调咋又和剥削连到一块了？</p>
<p>是这样，按照现在的技术，当室外温度到43摄氏度以上的时候（来自百度百科），空调的制冷效果就会失效。那么可以想象，随着空调导致全球变暖愈发严重，当气温超过43摄氏度时，现有的空调就没用了。当然，不排除技术的进步。但是技术的进步也会导致成本的增加，那时候不是所有人都能用得起空调。</p>
<p>到此，也就得出了——空调剥削理论。</p>
<h2>这个理论有两层含义：</h2>
<p><strong>第一层是，技术的进步没能克服43摄氏度的气温，空调没用了。也就是空调作为一个没有生命，没有意识的机器，剥削了包括人类在内的地球全体。</strong></p>
<p><strong>第二层是，技术的进步克服了43摄氏度的气温，空调依然有作用，但使用成本大大增加。即能够使用空调的少数人类剥削包括用不上空调的其余人类在内的地球全体。</strong></p>
]]></content><link href="https://github.com/geoqiao/gitblog/issues/7" rel="alternate"/><category term="胡思乱想"/><category term="热"/><published>2023-07-15T03:25:05+00:00</published></entry><entry><id>https://github.com/geoqiao/gitblog/issues/6</id><title>关于历史</title><updated>2023-08-19T07:57:45.990730+00:00</updated><content type="html"><![CDATA[<p>吃饭的时候突然想到，把历史比喻成一个车轮真的是生动形象且具体。</p>
<p>在某种角度上来看，这个车轮一直在向前滚动；另一种种角度上，车轮又在不断循环，车轮的材质变化，滚动的速度也不一样。</p>
<p>一些东西一直再改变，但一些东西一直没变。</p>
]]></content><link href="https://github.com/geoqiao/gitblog/issues/6" rel="alternate"/><category term="胡思乱想"/><published>2023-07-15T03:17:05+00:00</published></entry><entry><id>https://github.com/geoqiao/gitblog/issues/5</id><title>with_sql _as_english</title><updated>2023-08-19T07:57:46.072263+00:00</updated><content type="html"><![CDATA[<h2>描述</h2>
<ol>
<li>分享自己学习 SQL 的经验。</li>
<li><code>WITH 临时表名 AS 子查询</code> 是 SQL 中一个常用的语法，这篇分享会介绍这个语法。</li>
<li>SQL 很简单，只需要知道一些英文单词什么意思，就可以读懂。</li>
</ol>
<h2>英文单词列表</h2>
<p>select：选择<strong>哪些字段</strong>
from：从<strong>哪个表</strong>选择这段
where：从某个表中符合<strong>哪些条件的数据</strong>进行选择
left join：就是excel 中的 vlookup #4 </p>
<h2>用 excel 思维读 SQL 代码</h2>
<p>理解了以上的几个单词，你就可以读懂 SQL 代码了，比如如下的代码片段：</p>
<pre><code>SELECT
	table1.id
	,table2.name
FROM table1
LEFT JOIN table2
ON table1.id = table2.id
WHERE table1.column1 = &#x27;1&#x27;
</code></pre>
<p>在这个示例中，<code>table1</code>  和  <code>table2</code>  是两个不同的表，我们在 <code>table1</code> 中写了一个 <code>vlookup</code> ，这个公式以两张表中的 <code>id</code> 字段为条件关联，把 <code>table2</code>  中的 <code>name</code> 字段匹配到了 <code>table1</code> ，并且匹配完成后进行了一个筛选，只选择 <code>table1</code> 中 <code>column1</code> 字段为 <code>&#x27;1&#x27;</code> 的行。</p>
]]></content><link href="https://github.com/geoqiao/gitblog/issues/5" rel="alternate"/><category term="Data analysis"/><category term="SQL"/><published>2023-07-15T03:09:11+00:00</published></entry><entry><id>https://github.com/geoqiao/gitblog/issues/4</id><title>excel 学习经验分享</title><updated>2023-08-19T07:57:46.154073+00:00</updated><content type="html"><![CDATA[<h2>描述</h2>
<ol>
<li>
<p>这是一个分享个人 excel 经验的文档。</p>
</li>
<li>
<p>不分享特定函数的使用方法；实际上，你可以在百度/谷歌轻松搜索到答案。</p>
</li>
<li>
<p>分享一些思路，这些思路可以用在 SQL 和 Python 的学习中。</p>
</li>
</ol>
<h2>函数与 <code>y=x+2</code></h2>
<p><code>y=x+2</code> 是一个非常简单的数学方程，如果我们给定符合格式的 X 的值，代入这个方程式，就可以得到期望的 Y 值。</p>
<p>例如：假设 <code>x=2</code>，则 Y = 2+2，即 Y = 4；但是，假设 <code>x=假设</code>，却得不到任何值。</p>
<p>这是因为，在这里变量 X 只能为一个数字格式，方程式才能被正确计算。</p>
<p>同理，excel的函数也是如此，例如常用的vlookup、xlookup、sumifs、if等等，只要在单元格内输入 <code>=vlookup(函数要求的参数格式)</code>，即可得到期望的结果。你可以在Google或者百度搜索到函数的用法。
以此类推，excel的任一函数都可以这样看待。当使用次数多了之后，便不用每次都去搜索参数格式。</p>
<h2>数据透视表</h2>
<p>数据透视表是一个数据分析工作中非常实用的工具。</p>
<h3>数据透视表优势</h3>
<ol>
<li>很多时候数据透视表的性能（运行速度）要好于使用函数的方式。</li>
<li>使用上不需要手动输入参数，只需要会使用鼠标<code>拖、拉、拽</code>三招就可以。</li>
<li>会了<code>拖、拉、拽</code>，就会了一半的BI工具，操作方式真的很像市面上所有的主流 BI 工具如tableau、powerbi、finebi。</li>
</ol>
<h3>数据透视表操作流程</h3>
<ol>
<li>
<p>准备数据：首先需要准备好需要进行分析的数据，并将其放入 Excel 中。</p>
</li>
<li>
<p>选择数据透视表：在 Excel 中，选择需要进行分析的数据区域，然后在菜单栏中选择“插入”选项卡中的“数据透视表”。</p>
</li>
<li>
<p>设定数据源：在弹出的“数据透视表创建向导”中，选择“选择多个合适的数据源”选项，并将数据源区域的范围填入。</p>
</li>
<li>
<p>设定行、列及值：在“数据透视表字段列表”中，将需要分析的数据字段拖动到“行”、“列”、“值”区域中。</p>
</li>
<li>
<p>设定筛选器：可以在“数据透视表字段列表”中，将需要进行筛选的数据字段拖动到“筛选器”区域中，并进行筛选。</p>
</li>
<li>
<p>设定样式：根据需要，可以在“设计”选项卡中设定数据透视表的样式。</p>
</li>
<li>
<p>更新数据：当需要更新数据时，只需右键单击数据透视表并选择“刷新”即可。</p>
</li>
</ol>
]]></content><link href="https://github.com/geoqiao/gitblog/issues/4" rel="alternate"/><category term="Data analysis"/><category term="excel"/><published>2023-07-15T02:54:59+00:00</published></entry></feed>